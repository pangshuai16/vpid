# 可选，将显示在 GitHub 存储库的“操作”选项卡中的工作流名称
name: Release CI

# 指定此工作流的触发器
on:
  push:
    # 匹配特定标签 (refs/tags)
    tags:
      - "v*" # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流

# 需要运行的作业组合
jobs:
  # 任务：创建 release 版本
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
  # 编译 Tauri
  build-tauri:
    needs: create-release
    # needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            rust_target: aarch64-unknown-linux-gnu
          - os: macos-latest
            rust_target: x86_64-apple-darwin
          - os: windows-latest
            rust_target: i686-pc-windows-msvc

    runs-on: ${{ matrix.platform.os }}
    steps:
      - uses: actions/checkout@v4

      # ubuntu 安装依赖
      - name: install dependencies (ubuntu only)
        if: matrix.platform.rust_target == 'x86_64-unknown-linux-gnu' &&  matrix.platform.rust_target != 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev libudev-dev
      # 安装 Rust
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        if: matrix.platform.rust_target != 'aarch64-unknown-linux-gnu'
        with:
          toolchain: stable

      # 使用 Rust 缓存，加快安装速度
      - uses: Swatinem/rust-cache@v1
        if: matrix.platform.rust_target != 'aarch64-unknown-linux-gnu'

      # 安装 Node.js
      - name: Setup node
        uses: actions/setup-node@v4
        if: matrix.platform.rust_target != 'aarch64-unknown-linux-gnu'
        with:
          node-version: 20

      # 安装 pnpm
      - uses: pnpm/action-setup@v2
        if: matrix.platform.rust_target != 'aarch64-unknown-linux-gnu'
        name: Install pnpm
        with:
          version: 8
          run_install: false

      # 获取 pnpm 缓存
      - name: Get pnpm store directory
        if: matrix.platform.rust_target != 'aarch64-unknown-linux-gnu'
        id: pnpm_cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> "$GITHUB_OUTPUT"

      # 使用 pnpm 缓存
      - uses: actions/cache@v3
        name: Setup pnpm cache
        if: matrix.platform.rust_target != 'aarch64-unknown-linux-gnu'
        with:
          path: ${{ steps.pnpm_cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 前端构建
      - name: install frontend dependencies
        if: matrix.platform.rust_target != 'aarch64-unknown-linux-gnu'
        run: pnpm i && pnpm build

      # arm构建
      - uses: pguyot/arm-runner-action@v2
        name: install dependencies (arm only)
        if: matrix.platform.rust_target == 'aarch64-unknown-linux-gnu'
        with:
          base_image: dietpi:rpi_armv8_bullseye
          cpu: cortex-a53
          bind_mount_repository: true
          image_additional_mb: 10240
          optimize_image: false
          commands: |
            # Rust complains (rightly) that $HOME doesn't match eid home
            export HOME=/root
            # Workaround to CI worker being stuck on Updating crates.io index
            export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse
            # Install setup prerequisites
            apt-get update -y --allow-releaseinfo-change
            apt-get upgrade -y
            apt-get autoremove -y
            apt-get install curl
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            . "$HOME/.cargo/env"
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash
            # Install framework specific packages
            apt-get install -y nodejs
            npm install next@latest react@latest react-dom@latest eslint-config-next@latest
            # Install build tools and tauri-cli requirements
            apt-get install -y libwebkit2gtk-4.0-dev build-essential wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
            cargo install tauri-cli
            # Install frontend dependencies
            npm install
            # Build the application
            cargo tauri build

      # 构建应用
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --target ${{matrix.platform.rust_target}}
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
          releaseDraft: true
          prerelease: true
